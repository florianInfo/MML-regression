grammar org.xtext.example.mydsl.Mml with org.eclipse.xtext.common.Terminals

generate mml "http://www.xtext.org/example/mydsl/Mml"

MMLModel:
	input=DataInput
	algorithm=MLChoiceAlgorithm
	formula=RFormula?
	validation=Validation
	;



	
/*
 * 
 * mini DSL to read data (here CSV)
 * mini CSV DSL
 */
DataInput: 'datainput' filelocation=STRING (parsingInstruction=CSVParsingConfiguration)?;

CSVParsingConfiguration:
	// we could extend it with quotes handling, encoding format, or even specificities of library used to parse it (eg pandas vs readcsv)
	"separator" sep=CSVSeparator 	
;

enum CSVSeparator : COMMA=',' | SEMI_COLON=";" ;




/*
 * mini DSL to select the ML algorithm we want 
 * we include the choice of the targeted language/framework
 * ML algorithms can have hyperparameters
 * 
 */

MLChoiceAlgorithm:
	'mlframework' framework = FrameworkLang
	'algorithm' algorithm = MLAlgorithm
;


enum FrameworkLang: SCIKIT="scikit-learn" | R="R" | JavaWeka="Weka" | XGBoost="xgboost";

MLAlgorithm : (SVR|DT|RandomForest|SGD|GTB) ; // TODO: additional algorithm


SVR: 
	{SVR} 'SVR' ('C=' C=FLOAT)? ('kernel=' kernel=SVMKernel)?
	;
	
enum SVMKernel:
	rbf='rbf'|linear='linear'|poly='poly'
;

DT:
	{DT} ('DT'|'DecisionTree') (max_depth=INT)? ; // TODO: additional hyperparameters
	// note: R-package CART: anova 


RandomForest: {RandomForest}
	('RandomForest'|'RF')
; // TODO: hyperparameters?

SGD: {SGD}
	('StochasticGradientDescent'|'SGD')
; // TODO: hyperparameters?

GTB: {GTB}
	('GradientBoostingRegressor'|'GTB')
;

FLOAT: INT '.' INT;	


/*
 * mini DSL to specify "formula"
 * inspired from R formula 
 */
 
RFormula:
	('formula' (predictive=FormulaItem "~")? predictors=XFormula)
;

XFormula: (AllVariables | PredictorVariables);

AllVariables : all='.';
PredictorVariables : 
	(vars+=FormulaItem ("+" vars+=FormulaItem)*)
;

// by name or integer
FormulaItem:
	column=INT | colName=STRING
;


/*
 * mini DSL for evaluation
 * choice of a "stratification" strategy and metric
 */
Validation:
	stratification=StratificationMethod
	metric+=ValidationMetric+
	
;

StratificationMethod:
	CrossValidation|TrainingTest
;

CrossValidation:
	'CrossValidation' '{'
	'numRepetitionCross' number = INT
	'}'
; // TODO: can certainly be extended

TrainingTest:
	'TrainingTest' '{'
	'percentageTraining' number = INT
	'}'
;

enum ValidationMetric:
	MSE='mean_squared_error' | MAE='mean_absolute_error' | MAPE="mean_absolute_percentage_error"; 
// TODO: can certainly be extended
